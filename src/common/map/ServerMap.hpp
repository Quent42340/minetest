/*
Minetest
Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 2.1 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/
#ifndef SERVERMAP_HPP_
#define SERVERMAP_HPP_

#include "common/map/Map.hpp"

// This is the only map class that is able to generate map.
class ServerMap : public Map {
	public:
		/*
			savedir: directory to which map data should be saved
		*/
		ServerMap(const std::string &savedir, IGameDef *gamedef, EmergeManager *emerge);
		~ServerMap();

		s32 mapType() const
		{
			return MAPTYPE_SERVER;
		}

		/*
		   Get a sector from somewhere.
		   - Check memory
		   - Check disk (doesn't load blocks)
		   - Create blank one
		   */
		MapSector *createSector(v2s16 p);

		/*
		   Blocks are generated by using these and makeBlock().
		   */
		bool blockpos_over_mapgen_limit(v3s16 p);
		bool initBlockMake(v3s16 blockpos, BlockMakeData *data);
		void finishBlockMake(BlockMakeData *data,
				std::map<v3s16, MapBlock*> *changed_blocks);

		/*
		   Get a block from somewhere.
		   - Memory
		   - Create blank
		   */
		MapBlock *createBlock(v3s16 p);

		/*
		   Forcefully get a block from somewhere.
		   - Memory
		   - Load from disk
		   - Create blank filled with CONTENT_IGNORE

*/
		MapBlock *emergeBlock(v3s16 p, bool create_blank=true);

		/*
		   Try to get a block.
		   If it does not exist in memory, add it to the emerge queue.
		   - Memory
		   - Emerge Queue (deferred disk or generate)
		   */
		MapBlock *getBlockOrEmerge(v3s16 p3d);

		// Helper for placing objects on ground level
		s16 findGroundLevel(v2s16 p2d);

		/*
		   Misc. helper functions for fiddling with directory and file
		   names when saving
		   */
		void createDirs(std::string path);
		// returns something like "map/sectors/xxxxxxxx"
		std::string getSectorDir(v2s16 pos, int layout = 2);
		// dirname: final directory name
		v2s16 getSectorPos(const std::string &dirname);
		v3s16 getBlockPos(const std::string &sectordir, const std::string &blockfile);
		static std::string getBlockFilename(v3s16 p);

		/*
		   Database functions
		   */
		static MapDatabase *createDatabase(const std::string &name, const std::string &savedir, Settings &conf);

		// Returns true if the database file does not exist
		bool loadFromFolders();

		// Call these before and after saving of blocks
		void beginSave();
		void endSave();

		void save(ModifiedState save_level);
		void listAllLoadableBlocks(std::vector<v3s16> &dst);
		void listAllLoadedBlocks(std::vector<v3s16> &dst);

		MapgenParams *getMapgenParams();

		bool saveBlock(MapBlock *block);
		static bool saveBlock(MapBlock *block, MapDatabase *db);
		// This will generate a sector with getSector if not found.
		void loadBlock(const std::string &sectordir, const std::string &blockfile,
				MapSector *sector, bool save_after_load=false);
		MapBlock* loadBlock(v3s16 p);
		// Database version
		void loadBlock(std::string *blob, v3s16 p3d, MapSector *sector, bool save_after_load=false);

		bool deleteBlock(v3s16 blockpos);

		void updateVManip(v3s16 pos);

		// For debug printing
		virtual void PrintInfo(std::ostream &out);

		bool isSavingEnabled(){ return m_map_saving_enabled; }

		u64 getSeed();
		s16 getWaterLevel();

		/*!
		 * Fixes lighting in one map block.
		 * May modify other blocks as well, as light can spread
		 * out of the specified block.
		 * Returns false if the block is not generated (so nothing
		 * changed), true otherwise.
		 */
		bool repairBlockLight(v3s16 blockpos,
				std::map<v3s16, MapBlock *> *modified_blocks);

		MapSettingsManager settings_mgr;

	private:
		// Emerge manager
		EmergeManager *m_emerge;

		std::string m_savedir;
		bool m_map_saving_enabled;

#if 0
		// Chunk size in MapSectors
		// If 0, chunks are disabled.
		s16 m_chunksize;
		// Chunks
		core::map<v2s16, MapChunk*> m_chunks;
#endif

		/*
		   Metadata is re-written on disk only if this is true.
		   This is reset to false when written on disk.
		   */
		bool m_map_metadata_changed = true;
		MapDatabase *dbase = nullptr;
		MapDatabase *dbase_ro = nullptr;
};

#endif // SERVERMAP_HPP_
